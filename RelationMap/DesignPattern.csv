name,description
Abstract Factory,互いに関連したり依存し合うオブジェクト群を、その具象クラスを明確にせずに生成するためのインタフェースを提供する。
Adapter,あるクラスのインタフェースを、クライアントが求める他のインタフェースへ変換する。Adapterパターンはインテフェースに互換性のないクラス同士を組み合わせることができる。
Bridge,抽出されたクラスと実装を分離して、それらを独立に変更できるようにする。
Builder,複合オブジェクトについて、その作成過程を表現形式に依存しないものにすることで、同じ作成過程で異なる表現形式のオブジェクトを作成できるようにする。
Chain of Responsibility,1つ以上のオブジェクトに要求を処理する機会を与えることで、要求素送信するオブジェクトと受信するオブジェクトの結合を避ける。
Command,要求をオブジェクトとしてカプセル化することによって、異なる要求や要求からなるキューやログにより、クライアントをパラメータ化する。
Composite,部分と全体の階層を表現する。クライアントは、個々のオブジェクトを合成したものを一様に扱うことができる。
Decorator,オブジェクトに責任を動的に追加する。
Facade,サブシステム内に存在する複数のインタフェースに1つの統一インタフェースを与える。
Factory Method,オブジェクトを生成するときのインタフェースだけを規定して、実際にどのクラスをインスタンス化するかはサブクラスが決める。
Flyweight,多数の細かいオブジェクトを効率よくサポートするために共有を利用する。
Interpreter,言語に対して、文法表現とそれを使用して文を解釈するインタプリタを一緒に定義する。
Iterator,集約オブジェクトが基にある内部表現を公開せずに、その要素に順にアクセスする方法を提供する。
Mediator,オブジェクト群の相互作用をカプセル化するオブジェクトを定義する。オブジェクト同士が明示的にお互いを参照し合うことがないようにする。
Memento,カプセルかを破壊せずに、オブジェクト内の内部状態を捉えて外面化しておき、オブジェクトを後に戻すことができるようにする。
Observer,あるオブジェクトが状態を変えた時に、それに依存するすべてのオブジェクトに自動的に周知・更新されるように、オブジェクト間に一対多の依存関係を定義する。
Prototype,生成すべきオブジェクトの種類を原型となるインスタンスを使って明確にし、それをコピーすることで新たなオブジェクトの生成を行う。
Proxy,あるオブジェクトへのアクセスを制御するために、そのオブジェクトの代理または入れ物を提供する。
Singleton,あるクラスに対してインスタンスが1つしか存在しないことを保証し、それにアクセスするためのグローバルな方法を提供する。
State,オブジェクトの内部状態が変化した時に、オブジェクトが振る舞いを変えるようにする。
Strategy,アルゴリズムの集合を定義し、各アルゴリズムをカプセル化して、それらを交換可能にする。
Template Method,1つのメソッドにアルゴリズムのスケルトンを定義しておき、その中のステップについてはサブクラスでの定義に任せる。
Vistor,あるオブジェクト構造上の要素で実行されるメソッドを表現する。クラスに変更を加えず、新しいメソッドを定義する。